#!/usr/bin/luajit

-- Dogen: Generate markdown documentation from comments on any language
-- (C) Bowuigi 2021
-- Zlib license

-- Stuff configurable from the dogenfile
local p = {
	name = "",
	author = "",
	license = "",
	description = "",
	dict_name = "",
	out_file = ""
}

local conf = io.open("dogenfile")

if (conf == nil) then
	print("Dogen, error: no dogenfile found, please create one")
	os.exit(1)
end

-- Identify stuff on the dogenfile, might change this to a for loop with unordered matching, but for now this works
_, _, p.name,
p.author, p.license, p.description,
p.dict_name, p.out_file = conf:read("*a"):find([[
Project: (.*)
Author: (.*)
License: (.*)
Description: (.*)
Dict name: (.*)
Output file: (.*)
]])

conf:close()

function writef(file,fmt, ...)
	file:write(string.format(fmt.."\n\n", ...))
end

-- Open the libraries, cycling from arg[1] to arg[#arg]
local lib = io.open(arg[1] or "lib.h")

if (lib == nil) then
	print("Dogen, error: Couldn't find the file "..(arg[1] or "lib.h" ))
end

funcs = {}
dicts = {}
currentf = ""
currentfn = 0
currentd = ""
currentdn = 0
retn = 1
paramn = 1

for line in lib:lines() do
	-- Detect dictionaries
	do
		local xd, _, cd, cddesc = line:find(".*[@\\!]dict (%S+) (.*)")
		if (xd) then
			currentd = cd
			currentdn = currentdn + 1
			dicts[currentdn] = {
				name = currentd,
				desc = cddesc,
				field = {},
				has_fields = false
			}
		end
	end

	-- Detect dictionary fields
	do
		local xdf, _, ftype, field, fdesc = line:find(".*[@\\!]field (%S+) (%S+) (.*)")
		if (xdf) then
			dicts[currentdn].field[field] = {
				type = ftype,
				desc = fdesc
			}
			dicts[currentdn].has_fields = true
		end
	end

	-- Detect function declarations
	do
		local xf, _, cf, cfdesc = line:find(".*[@\\!]function (%S+) (.*)")
		if (xf) then
			-- Set type, description and other things of the function
			currentf = cf
			currentfn = currentfn + 1
			funcs[currentfn] = {
				name = currentf,
				desc = cfdesc,
				param = {},
				ret = {},
				has_params = false,
				has_ret = false,
			}
		end
	end

	-- Detect parameters
	do
		local xa, _, ptype, param, pdesc = line:find(".*[@\\!]param (%S+) (%S+) (.*)")
		if (xa) then
			-- Set type and description of the parameter
			funcs[currentfn].param[paramn] = {
				name = param,
				type = ptype,
				desc = pdesc
			}
			funcs[currentfn].has_params = true
			paramn = paramn + 1
		end
	end

	-- Detect return values
	do
		local xr, _, rtype, rdesc = line:find(".*[@\\!]return (%S+) (.*)")
		if (xr) then
			-- Set type and description of the return value
			funcs[currentfn].ret[retn] = {
				type = rtype,
				desc = rdesc
			}
			retn = retn + 1
			funcs[currentfn].has_ret = true
		end
	end
end

lib:close()

-- Write the output
out = io.open(p.out_file, "w")

-- Header
writef(out, "# %s", p.name)
writef(out, "By %s", p.author)
writef(out,"%s", p.description)
writef(out,"Licensed under the %s license", p.license)

-- Actual docs

writef(out,"## %s", p.dict_name)

for k,v in pairs(dicts) do
	-- Dict name
	writef(out, "### %s", v.name)
	writef(out, "%s", v.desc)
	-- Dict fields
	if (v.has_fields) then
		out:write("**Fields**:\n\n")
		for fk, fv in pairs(v.field) do
			writef(out, "- `%s %s`: %s", fv.type, fk, fv.desc)
		end
	end
end

out:write("## Functions\n\n")

for _, v in ipairs(funcs) do
	-- Function name
	writef(out, "### %s", v.name)
	writef(out, "%s", v.desc)
	-- Function parameters
	if (v.has_params) then
		out:write("**Parameters**:\n\n")
		for _, pv in pairs(v.param) do
			writef(out, "- `%s %s`: %s", pv.type, pv.name, pv.desc)
		end
	end

	-- Function return values
	if (v.has_ret) then
		out:write("**Return values**:\n\n")
		for rk, rv in ipairs(v.ret) do
			writef(out, "%d. `%s`: %s", rk, rv.type, rv.desc)
		end
	end
end

-- Attribution, you can remove the line generated if you want
writef(out, "Documentation generated by [dogen](https://github.com/Bowuigi/dogen) for %s", p.name)

out:close()
